{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red70\green137\blue204;\red23\green23\blue23;\red202\green202\blue202;
\red140\green211\blue254;\red167\green197\blue152;\red67\green192\blue160;\red212\green214\blue154;\red194\green126\blue101;
\red89\green138\blue67;\red205\green173\blue106;\red183\green111\blue179;}
{\*\expandedcolortbl;;\cssrgb\c33725\c61176\c83922;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;
\cssrgb\c61176\c86275\c99608;\cssrgb\c70980\c80784\c65882;\cssrgb\c30588\c78824\c69020;\cssrgb\c86275\c86275\c66667;\cssrgb\c80784\c56863\c47059;
\cssrgb\c41569\c60000\c33333;\cssrgb\c84314\c72941\c49020;\cssrgb\c77255\c52549\c75294;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 char\cf4 \strokec4  *\cf5 \strokec5 fp1\cf4 \strokec4  = \cf5 \strokec5 argv\cf4 \strokec4 [\cf6 \strokec6 2\cf4 \strokec4 ];\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 char\cf4 \strokec4  *\cf5 \strokec5 fp\cf4 \strokec4  = \cf5 \strokec5 argv\cf4 \strokec4 [\cf6 \strokec6 3\cf4 \strokec4 ];\cb1 \
\cb3     \cf7 \strokec7 FILE\cf4 \strokec4  *\cf5 \strokec5 fileImage\cf4 \strokec4  = \cf8 \strokec8 fopen\cf4 \strokec4 (\cf5 \strokec5 fp1\cf4 \strokec4 , \cf9 \strokec9 "rb"\cf4 \strokec4 );\cb1 \
\cb3     \cf7 \strokec7 FILE\cf4 \strokec4  *\cf5 \strokec5 txtFile\cf4 \strokec4  = \cf8 \strokec8 fopen\cf4 \strokec4 (\cf5 \strokec5 fp\cf4 \strokec4 , \cf9 \strokec9 "r"\cf4 \strokec4 );\cb1 \
\cb3     ;\cb1 \
\cb3     \cf7 \strokec7 BITMAP\cf4 \strokec4  \cf5 \strokec5 bm\cf4 \strokec4 ;\cb1 \
\cb3     \cf8 \strokec8 fread\cf4 \strokec4 (&(\cf5 \strokec5 bm\cf4 \strokec4 .\cf5 \strokec5 header\cf4 \strokec4 ), \cf2 \strokec2 sizeof\cf4 \strokec4 (\cf7 \strokec7 HEADER\cf4 \strokec4 ), \cf6 \strokec6 1\cf4 \strokec4 , \cf5 \strokec5 fileImage\cf4 \strokec4 );\cb1 \
\cb3     \cf10 \strokec10 // fread(&(bm.header), sizeof(HEADER), 1, fileImage); // read header\cf4 \cb1 \strokec4 \
\cb3     \cf8 \strokec8 fclose\cf4 \strokec4 (\cf5 \strokec5 fileImage\cf4 \strokec4 );\cb1 \
\cb3     \cf2 \strokec2 int\cf4 \strokec4  \cf5 \strokec5 numOfPixels\cf4 \strokec4  = \cf5 \strokec5 bm\cf4 \strokec4 .\cf5 \strokec5 header\cf4 \strokec4 .\cf5 \strokec5 biHeight\cf4 \strokec4  * \cf5 \strokec5 bm\cf4 \strokec4 .\cf5 \strokec5 header\cf4 \strokec4 .\cf5 \strokec5 biWidth\cf4 \strokec4 ;\cb1 \
\cb3     \cf2 \strokec2 int\cf4 \strokec4  \cf5 \strokec5 padding\cf4 \strokec4  = ((\cf5 \strokec5 bm\cf4 \strokec4 .\cf5 \strokec5 header\cf4 \strokec4 .\cf5 \strokec5 biWidth\cf4 \strokec4 ) * \cf6 \strokec6 3\cf4 \strokec4 ) % \cf6 \strokec6 4\cf4 \strokec4 ;\cb1 \
\cb3     \cf8 \strokec8 printf\cf4 \strokec4 (\cf9 \strokec9 "\cf11 \strokec11 \\n\cf9 \strokec9 padding \cf5 \strokec5 %d\cf11 \strokec11 \\n\cf9 \strokec9 "\cf4 \strokec4 , \cf5 \strokec5 padding\cf4 \strokec4 );\cb1 \
\cb3     \cf2 \strokec2 int\cf4 \strokec4  \cf5 \strokec5 dataBytes\cf4 \strokec4  = \cf5 \strokec5 numOfPixels\cf4 \strokec4  * \cf6 \strokec6 3\cf4 \strokec4  + \cf5 \strokec5 bm\cf4 \strokec4 .\cf5 \strokec5 header\cf4 \strokec4 .\cf5 \strokec5 biHeight\cf4 \strokec4  * \cf5 \strokec5 padding\cf4 \strokec4  * \cf6 \strokec6 3\cf4 \strokec4 ;\cb1 \
\cb3     \cf5 \strokec5 bm\cf4 \strokec4 .\cf5 \strokec5 data\cf4 \strokec4  = (\cf7 \strokec7 BYTE\cf4 \strokec4  *)\cf8 \strokec8 malloc\cf4 \strokec4 (\cf2 \strokec2 sizeof\cf4 \strokec4 (\cf7 \strokec7 BYTE\cf4 \strokec4 ) * \cf5 \strokec5 dataBytes\cf4 \strokec4 );\cb1 \
\cb3     \cf10 \strokec10 // readData(fp1, &bm, dataBytes);\cf4 \cb1 \strokec4 \
\cb3     \cf12 \strokec12 if\cf4 \strokec4  (!\cf5 \strokec5 txtFile\cf4 \strokec4 )\cb1 \
\cb3     \{\cb1 \
\cb3         \cf8 \strokec8 perror\cf4 \strokec4 (\cf9 \strokec9 "Input error"\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3     \cf8 \strokec8 fseek\cf4 \strokec4 (\cf5 \strokec5 txtFile\cf4 \strokec4 , \cf6 \strokec6 0\cf4 \strokec4 , \cf2 \strokec2 SEEK_END\cf4 \strokec4 );\cb1 \
\cb3     \cf2 \strokec2 int\cf4 \strokec4  \cf5 \strokec5 fileSize\cf4 \strokec4  = \cf8 \strokec8 ftell\cf4 \strokec4 (\cf5 \strokec5 txtFile\cf4 \strokec4 );\cb1 \
\cb3     \cf8 \strokec8 printf\cf4 \strokec4 (\cf9 \strokec9 "filesize: \cf5 \strokec5 %d\cf11 \strokec11 \\n\cf9 \strokec9 "\cf4 \strokec4 , \cf5 \strokec5 fileSize\cf4 \strokec4 );\cb1 \
\cb3     \cf8 \strokec8 fseek\cf4 \strokec4 (\cf5 \strokec5 txtFile\cf4 \strokec4 , \cf6 \strokec6 0\cf4 \strokec4 , \cf2 \strokec2 SEEK_SET\cf4 \strokec4 );\cb1 \
\
\cb3     \cf2 \strokec2 char\cf4 \strokec4  *\cf5 \strokec5 text\cf4 \strokec4  = (\cf2 \strokec2 char\cf4 \strokec4  *)\cf8 \strokec8 malloc\cf4 \strokec4 ((\cf5 \strokec5 fileSize\cf4 \strokec4  + \cf6 \strokec6 1\cf4 \strokec4 ) * \cf2 \strokec2 sizeof\cf4 \strokec4 (\cf2 \strokec2 char\cf4 \strokec4 ));\cb1 \
\
\cb3     \cf2 \strokec2 int\cf4 \strokec4  \cf5 \strokec5 i\cf4 \strokec4  = \cf6 \strokec6 0\cf4 \strokec4 ;\cb1 \
\cb3     \cf2 \strokec2 int\cf4 \strokec4  \cf5 \strokec5 c\cf4 \strokec4 ;\cb1 \
\cb3     \cf12 \strokec12 while\cf4 \strokec4  (\cf6 \strokec6 1\cf4 \strokec4 )\cb1 \
\cb3     \{\cb1 \
\cb3         \cf5 \strokec5 c\cf4 \strokec4  = \cf8 \strokec8 fgetc\cf4 \strokec4 (\cf5 \strokec5 txtFile\cf4 \strokec4 );\cb1 \
\cb3         \cf12 \strokec12 if\cf4 \strokec4  (\cf5 \strokec5 c\cf4 \strokec4  == \cf2 \strokec2 EOF\cf4 \strokec4 )\cb1 \
\cb3         \{\cb1 \
\cb3             \cf12 \strokec12 break\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cf5 \strokec5 text\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ] = (\cf2 \strokec2 char\cf4 \strokec4 )\cf5 \strokec5 c\cf4 \strokec4 ;\cb1 \
\cb3         \cf5 \strokec5 i\cf4 \strokec4 ++;\cb1 \
\cb3     \}\cb1 \
\cb3     \cf10 \strokec10 // printf("i: %d\\n");\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 text\cf4 \strokec4 [\cf5 \strokec5 fileSize\cf4 \strokec4 ] = \cf9 \strokec9 '\cf11 \strokec11 \\0\cf9 \strokec9 '\cf4 \strokec4 ;\cb1 \
\cb3     \cf10 \strokec10 // printf("%s", text);\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 // printf("**%s**\\n", text);\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 int\cf4 \strokec4  \cf5 \strokec5 bitsLen\cf4 \strokec4  = \cf5 \strokec5 fileSize\cf4 \strokec4  * \cf6 \strokec6 8\cf4 \strokec4 ;\cb1 \
\cb3     \cf2 \strokec2 int\cf4 \strokec4  \cf5 \strokec5 bits\cf4 \strokec4 [\cf5 \strokec5 bitsLen\cf4 \strokec4 ];\cb1 \
\cb3     \cf12 \strokec12 for\cf4 \strokec4  (\cf5 \strokec5 i\cf4 \strokec4  = \cf6 \strokec6 0\cf4 \strokec4 ; \cf5 \strokec5 i\cf4 \strokec4  < \cf5 \strokec5 bitsLen\cf4 \strokec4 ; \cf5 \strokec5 i\cf4 \strokec4 ++)\cb1 \
\cb3     \{\cb1 \
\cb3         \cf5 \strokec5 bits\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ] = \cf8 \strokec8 getBit\cf4 \strokec4 (\cf5 \strokec5 text\cf4 \strokec4 , \cf5 \strokec5 i\cf4 \strokec4 );\cb1 \
\cb3         \cf10 \strokec10 // printf("%d, ", bits[i]);\cf4 \cb1 \strokec4 \
\cb3     \}\cb1 \
\cb3     \cf10 \strokec10 // for (i = 0; i < 50; i++)\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 // \{\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 //     // bits[i] = getBit(text, i);\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 //     printf("*%d, ", bits[i]);\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 // \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf8 \strokec8 printf\cf4 \strokec4 (\cf9 \strokec9 "\cf11 \strokec11 \\n\cf9 \strokec9 hmmm\cf11 \strokec11 \\n\cf9 \strokec9 "\cf4 \strokec4 );\cb1 \
\
\cb3     \cf7 \strokec7 BYTE\cf4 \strokec4  **\cf5 \strokec5 pixels\cf4 \strokec4  = (\cf7 \strokec7 BYTE\cf4 \strokec4  **)\cf8 \strokec8 malloc\cf4 \strokec4 (\cf5 \strokec5 bm\cf4 \strokec4 .\cf5 \strokec5 header\cf4 \strokec4 .\cf5 \strokec5 biHeight\cf4 \strokec4  * \cf2 \strokec2 sizeof\cf4 \strokec4 (\cf7 \strokec7 BYTE\cf4 \strokec4  *));\cb1 \
\cb3     \cf12 \strokec12 for\cf4 \strokec4  (\cf5 \strokec5 i\cf4 \strokec4  = \cf6 \strokec6 0\cf4 \strokec4 ; \cf5 \strokec5 i\cf4 \strokec4  < \cf5 \strokec5 bm\cf4 \strokec4 .\cf5 \strokec5 header\cf4 \strokec4 .\cf5 \strokec5 biHeight\cf4 \strokec4  + \cf5 \strokec5 padding\cf4 \strokec4 ; \cf5 \strokec5 i\cf4 \strokec4 ++)\cb1 \
\cb3     \{\cb1 \
\cb3         \cf10 \strokec10 // each row has width + padding\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 pixels\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ] = (\cf7 \strokec7 BYTE\cf4 \strokec4  *)\cf8 \strokec8 malloc\cf4 \strokec4 ((\cf5 \strokec5 bm\cf4 \strokec4 .\cf5 \strokec5 header\cf4 \strokec4 .\cf5 \strokec5 biWidth\cf4 \strokec4  + \cf5 \strokec5 padding\cf4 \strokec4 ) * \cf2 \strokec2 sizeof\cf4 \strokec4 (\cf7 \strokec7 BYTE\cf4 \strokec4 ));\cb1 \
\cb3     \}\cb1 \
\cb3     \cf8 \strokec8 printf\cf4 \strokec4 (\cf9 \strokec9 "height \cf5 \strokec5 %d\cf11 \strokec11 \\n\cf9 \strokec9 "\cf4 \strokec4 , \cf5 \strokec5 bm\cf4 \strokec4 .\cf5 \strokec5 header\cf4 \strokec4 .\cf5 \strokec5 biHeight\cf4 \strokec4 );\cb1 \
\cb3     \cf8 \strokec8 printf\cf4 \strokec4 (\cf9 \strokec9 "width \cf5 \strokec5 %d\cf11 \strokec11 \\n\cf9 \strokec9 "\cf4 \strokec4 , \cf5 \strokec5 bm\cf4 \strokec4 .\cf5 \strokec5 header\cf4 \strokec4 .\cf5 \strokec5 biWidth\cf4 \strokec4 );\cb1 \
\
\cb3     \cf2 \strokec2 int\cf4 \strokec4  \cf5 \strokec5 j\cf4 \strokec4  = \cf6 \strokec6 0\cf4 \strokec4 ;\cb1 \
\cb3     \cf2 \strokec2 int\cf4 \strokec4  \cf5 \strokec5 b\cf4 \strokec4  = \cf6 \strokec6 0\cf4 \strokec4 ;\cb1 \
\cb3     \cf2 \strokec2 int\cf4 \strokec4  \cf5 \strokec5 p\cf4 \strokec4  = \cf6 \strokec6 0\cf4 \strokec4 ;\cb1 \
\cb3     \cf2 \strokec2 int\cf4 \strokec4  \cf5 \strokec5 counter\cf4 \strokec4  = \cf6 \strokec6 0\cf4 \strokec4 ;\cb1 \
\cb3     \cf12 \strokec12 for\cf4 \strokec4  (\cf5 \strokec5 i\cf4 \strokec4  = \cf6 \strokec6 0\cf4 \strokec4 ; \cf5 \strokec5 i\cf4 \strokec4  < \cf5 \strokec5 bm\cf4 \strokec4 .\cf5 \strokec5 header\cf4 \strokec4 .\cf5 \strokec5 biHeight\cf4 \strokec4 ; \cf5 \strokec5 i\cf4 \strokec4 ++)\cb1 \
\cb3     \{\cb1 \
\cb3         \cf12 \strokec12 for\cf4 \strokec4  (\cf5 \strokec5 j\cf4 \strokec4  = \cf6 \strokec6 0\cf4 \strokec4 ; \cf5 \strokec5 j\cf4 \strokec4  < \cf5 \strokec5 bm\cf4 \strokec4 .\cf5 \strokec5 header\cf4 \strokec4 .\cf5 \strokec5 biWidth\cf4 \strokec4 ; \cf5 \strokec5 j\cf4 \strokec4 ++)\cb1 \
\cb3         \{\cb1 \
\cb3             \cf10 \strokec10 // printf("b %d\\n", bits[b]);\cf4 \cb1 \strokec4 \
\cb3             \cf12 \strokec12 if\cf4 \strokec4  (\cf5 \strokec5 counter\cf4 \strokec4  < \cf5 \strokec5 bitsLen\cf4 \strokec4 )\cf10 \strokec10  //num of bits is smaller than num of pixels\cf4 \cb1 \strokec4 \
\cb3             \{\cb1 \
\cb3                 \cf10 \strokec10 // if (getBit(text, bm.header.biHeight*j+i) == 0)\cf4 \cb1 \strokec4 \
\cb3                 \cf10 \strokec10 // \{\cf4 \cb1 \strokec4 \
\cb3                 \cf10 \strokec10 //     pixels[i][j] = 0;\cf4 \cb1 \strokec4 \
\cb3                 \cf10 \strokec10 // \}\cf4 \cb1 \strokec4 \
\cb3                 \cf10 \strokec10 // else\cf4 \cb1 \strokec4 \
\cb3                 \cf10 \strokec10 // \{\cf4 \cb1 \strokec4 \
\cb3                 \cf10 \strokec10 //     pixels[i][j] = 128;\cf4 \cb1 \strokec4 \
\cb3                 \cf10 \strokec10 // \}\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 pixels\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ][\cf5 \strokec5 j\cf4 \strokec4 ] = \cf6 \strokec6 128\cf4 \strokec4  * \cf8 \strokec8 getBit\cf4 \strokec4 (\cf5 \strokec5 text\cf4 \strokec4 , \cf5 \strokec5 bm\cf4 \strokec4 .\cf5 \strokec5 header\cf4 \strokec4 .\cf5 \strokec5 biHeight\cf4 \strokec4 *\cf5 \strokec5 i\cf4 \strokec4 +\cf5 \strokec5 j\cf4 \strokec4 );\cb1 \
\cb3                 \cf10 \strokec10 // printf("pixels[%d][%d]=%d\\n", i, j, pixels[i][j]);\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 b\cf4 \strokec4 ++;\cb1 \
\cb3                 \cf5 \strokec5 counter\cf4 \strokec4 ++;\cb1 \
\cb3             \}\cb1 \
\cb3             \cf12 \strokec12 else\cf4 \strokec4  \{\cf10 \strokec10  //fill remaining cells with 0\cf4 \cb1 \strokec4 \
\cb3                 \cf10 \strokec10 // printf("extra %d\\n", counter);\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 pixels\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ][\cf5 \strokec5 j\cf4 \strokec4 ] = \cf6 \strokec6 0\cf4 \strokec4 ;\cb1 \
\cb3                 \cf5 \strokec5 counter\cf4 \strokec4 ++;\cb1 \
\cb3             \}\cb1 \
\cb3         \}\cb1 \
\cb3         \cf10 \strokec10 // add padding\cf4 \cb1 \strokec4 \
\cb3         \cf12 \strokec12 for\cf4 \strokec4  (\cf5 \strokec5 p\cf4 \strokec4  = \cf6 \strokec6 0\cf4 \strokec4 ; \cf5 \strokec5 p\cf4 \strokec4  < \cf5 \strokec5 padding\cf4 \strokec4 ; \cf5 \strokec5 p\cf4 \strokec4 ++)\cb1 \
\cb3         \{\cb1 \
\cb3             \cf10 \strokec10 // printf("j %d\\n", j);\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 pixels\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ][\cf5 \strokec5 j\cf4 \strokec4 ] = \cf6 \strokec6 0\cf4 \strokec4 ;\cb1 \
\cb3             \cf10 \strokec10 // printf("pixels[%d][%d]=%d\\n", i, j, pixels[i][j]);\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 j\cf4 \strokec4 ++;\cb1 \
\cb3         \}\cb1 \
\cb3     \}\cb1 \
\cb3     \cf8 \strokec8 printf\cf4 \strokec4 (\cf9 \strokec9 "pixels \cf5 \strokec5 %d\cf9 \strokec9  bits \cf5 \strokec5 %d\cf9 \strokec9  counter \cf5 \strokec5 %d\cf9 \strokec9  databytes \cf5 \strokec5 %d\cf11 \strokec11 \\n\cf9 \strokec9 "\cf4 \strokec4 , \cf5 \strokec5 numOfPixels\cf4 \strokec4 , \cf5 \strokec5 bitsLen\cf4 \strokec4 , \cf5 \strokec5 counter\cf4 \strokec4 , \cf5 \strokec5 dataBytes\cf4 \strokec4 );\cb1 \
\cb3     \cf10 \strokec10 // printf("** %d\\n", pixels[0][1]);\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 // for (i=0;i<50;i++) \{\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 //     for (j=0;j<50;j++) \{\cf4 \cb1 \strokec4 \
\
\cb3     \cf10 \strokec10 //         printf("pixels[%d][%d]=%u\\n", i, j, pixels[i][j]);\cf4 \cb1 \strokec4 \
\
\cb3     \cf10 \strokec10 //     \}\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 // \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf10 \strokec10 //fill data\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 counter\cf4 \strokec4 =\cf6 \strokec6 0\cf4 \strokec4 ;\cb1 \
\cb3     \cf12 \strokec12 for\cf4 \strokec4  (\cf5 \strokec5 j\cf4 \strokec4 =\cf5 \strokec5 bm\cf4 \strokec4 .\cf5 \strokec5 header\cf4 \strokec4 .\cf5 \strokec5 biWidth\cf4 \strokec4 +\cf5 \strokec5 padding\cf4 \strokec4 -\cf6 \strokec6 1\cf4 \strokec4 ;\cf5 \strokec5 j\cf4 \strokec4 >=\cf6 \strokec6 0\cf4 \strokec4 ;\cf5 \strokec5 j\cf4 \strokec4 --) \{\cb1 \
\cb3         \cf12 \strokec12 for\cf4 \strokec4  (\cf5 \strokec5 i\cf4 \strokec4 =\cf6 \strokec6 0\cf4 \strokec4 ;\cf5 \strokec5 i\cf4 \strokec4 <\cf5 \strokec5 bm\cf4 \strokec4 .\cf5 \strokec5 header\cf4 \strokec4 .\cf5 \strokec5 biHeight\cf4 \strokec4 ;\cf5 \strokec5 i\cf4 \strokec4 ++) \{\cb1 \
\
\cb3             \cb1 \
\cb3             \cf5 \strokec5 bm\cf4 \strokec4 .\cf5 \strokec5 data\cf4 \strokec4 [\cf5 \strokec5 counter\cf4 \strokec4 ]=\cf5 \strokec5 pixels\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ][\cf5 \strokec5 j\cf4 \strokec4 ];\cb1 \
\cb3             \cf5 \strokec5 bm\cf4 \strokec4 .\cf5 \strokec5 data\cf4 \strokec4 [\cf5 \strokec5 counter\cf4 \strokec4 +\cf6 \strokec6 1\cf4 \strokec4 ]=\cf5 \strokec5 pixels\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ][\cf5 \strokec5 j\cf4 \strokec4 ];\cb1 \
\cb3             \cf5 \strokec5 bm\cf4 \strokec4 .\cf5 \strokec5 data\cf4 \strokec4 [\cf5 \strokec5 counter\cf4 \strokec4 +\cf6 \strokec6 2\cf4 \strokec4 ]=\cf5 \strokec5 pixels\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ][\cf5 \strokec5 j\cf4 \strokec4 ];\cb1 \
\cb3             \cf10 \strokec10 // printf("pixels[%d][%d]=%u bm.data[%d]=%u\\n", i, j, pixels[i][j], counter, bm.data[counter]);\cf4 \cb1 \strokec4 \
\cb3             \cf10 \strokec10 // printf("pixels[%d][%d]=%u bm.data[%d]=%u\\n", i, j, pixels[i][j], counter+1, bm.data[counter+1]);\cf4 \cb1 \strokec4 \
\cb3             \cf10 \strokec10 // printf("pixels[%d][%d]=%u bm.data[%d]=%u\\n", i, j, pixels[i][j], counter+2, bm.data[counter+2]);\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 counter\cf4 \strokec4 +=\cf6 \strokec6 3\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3     \}\cb1 \
\cb3     \cf10 \strokec10 // printf("%d pixel\\n", pixels[0][bm.header.biHeight-1]);\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 // printf("%d data \\n", bm.data[0]);\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 // printf("%d pixel\\n", pixels[5][bm.header.biHeight-1]);\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 // printf("%d data \\n", bm.data[56]);\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 char\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4 [\cf6 \strokec6 100\cf4 \strokec4 ];\cb1 \
\cb3     \cf2 \strokec2 char\cf4 \strokec4  *\cf5 \strokec5 fpNew\cf4 \strokec4  = \cf9 \strokec9 "new-"\cf4 \strokec4 ;\cb1 \
\cb3     \cf2 \strokec2 strcat\cf4 \strokec4 (\cf5 \strokec5 new\cf4 \strokec4 , \cf5 \strokec5 fpNew\cf4 \strokec4 );\cb1 \
\cb3     \cf10 \strokec10 // printf("file %s\\n", fp1);\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 strcat\cf4 \strokec4 (\cf5 \strokec5 new\cf4 \strokec4 , \cf5 \strokec5 fp1\cf4 \strokec4 );\cb1 \
\cb3     \cf10 \strokec10 // printf("new file : %s\\n", c);\cf4 \cb1 \strokec4 \
\cb3     \cf8 \strokec8 writeImage\cf4 \strokec4 (\cf5 \strokec5 bm\cf4 \strokec4 , \cf5 \strokec5 new\cf4 \strokec4 , \cf5 \strokec5 dataBytes\cf4 \strokec4 );\cb1 \
\cb3     \cf10 \strokec10 //********************************************* REMEMBER TO FREE LIKE BELOW\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 // for (int i = 0; i < r; i++)\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 //     free(arr[i]);\cf4 \cb1 \strokec4 \
\
\cb3     \cf10 \strokec10 // free(arr);\cf4 \cb1 \strokec4 \
}